
z = 3
------------------------------------
let f = (\().\x:x int.x +^x 1^lo)^lo in f () (1^z) 
------------------------------------

------------------------------------
z : z int
------------------------------------
z int
------------------------------------
Lambda permite pasaje de punteros (direcciones de memoria)

z = 3
------------------------------------
let f = (\().\x:lo int.x +^x 1^lo)^lo in f () (1^z) 
------------------------------------

------------------------------------
z : z int
------------------------------------
z int
------------------------------------
Lambda permite pasaje por referencias 


z = 3
------------------------------------
let x =  1^z in x +^x 1^lo
------------------------------------

------------------------------------
z : z int
------------------------------------
z int
------------------------------------
A diferencia del lambda, el let no permite pasaje por referencias/punteros, 
y se corresponde con que el let de regiones no abstrae regiones.






